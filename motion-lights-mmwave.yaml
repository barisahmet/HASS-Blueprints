blueprint:
  name: Motion Lights with mmWave Radar turn-off option
  description: Turn on the lights with motion/door sensors. Turn off with radar.
  domain: automation
  input:
    trigger:
      name: Trigger
      icon: mdi:cog-outline
      collapsed: false
      input:
        motion_sensor:
          name: Motion or door sensor / group
          description: These sensors are used to turn on the lights.
          selector:
            entity:
              multiple: false
              filter:
                - domain:
                    - binary_sensor
                    - schedule
        radar:
          name: Radar sensor
          description: mmWave radar sensor to turn lights off when no occupancy.
          default: []
          selector:
            entity:
              multiple: false
              filter:
                - domain: binary_sensor
                  device_class: occupancy
    lights:
      name: Lights
      icon: mdi:lightbulb
      collapsed: true
      input:
        target_light:
          name: Lights
          selector:
            target:
              entity:
                - domain: light
        target_light_night:
          name: Lights for night
          description: Lights to turn on in night mode. If you don't specify this, day lights will be used.
          default: []
          selector:
            target:
              entity:
                - domain: light
        brightness:
          name: Brightness (day)
          default: 255
          selector:
            number:
              min: 1
              max: 255
              mode: slider
        temperature:
          name: Temperature (day)
          default: 3000
          selector:
            color_temp:
              unit: kelvin
        night_toggle:
          name: Night mode toggle entity
          description: If any of these are on, night lights settigns will applied
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
                    - schedule
        brightness_night:
          name: Brightness (night)
          description: Night brightness.
          default: 255
          selector:
            number:
              min: 1
              max: 255
              mode: slider
        temperature_night:
          name: Temperature (night)
          default: 2700
          selector:
            color_temp:
              unit: kelvin
        delay:
          name: Delay (seconds)
          description: Wait time after mmWave sensor reports absence. The lights will be dimmed AFTER this. If you don't have a radar, please specify reasonable amount of delay.
          default: 0
          selector:
            number:
              min: 0
              max: 600
              mode: slider
        delay_non_mmwave:
          name: Non-mmWave Delay (seconds)
          description: Fallback delay if you don't have mmWave sensor / if mmWave didn't trigger in time.
          default: 60
          selector:
            number:
              min: 0
              max: 600
              mode: slider
        brightness_step_pct:
          name: Dim amount
          description: Relative dim amount when the lights about to turn off.
          default: -30
          selector:
            number:
              min: -100
              max: 100
              mode: slider
        dim_time:
          name: Dimmed time (seconds)
          description: Time to pass to turn lights off from dimmed state.
          default: 15
          selector:
            number:
              min: 0
              max: 60
              mode: slider

    ambient:
      name: Ambient
      icon: mdi:theme-light-dark
      collapsed: false
      input:
        ambient_sensor:
          name: Ambient light sensor
          description: Sensor to determine the ambient light.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - sensor
                  device_class:
                    - illuminance
              multiple: false
        min_lux:
          name: Minimum ambient light
          description: If the sensor reports lower lux value than this, lights will be on.
          default: 50
          selector:
            number:
              min: 0
              max: 1000
              step: 1
              unit_of_measurement: lux
              mode: slider

variables:
  temperature: !input temperature
  temperature_night: !input temperature_night
  brightness: !input brightness
  brightness_night: !input brightness_night
  motion_sensor: !input motion_sensor
  mmwave: !input radar
  mmwave_exists: "{{ mmwave is defined and expand(mmwave) | list | count > 0 }}"
  night_light_entities: !input "night_toggle"
  is_night: "{{ expand(night_light_entities) | selectattr('state', '==', 'on') | list | count > 0  }}"
  lights: !input "target_light"
  is_lights_on: "{{ expand(lights.entity_id) | selectattr('state', '==', 'on') | selectattr('attributes.brightness', 'defined') | selectattr('attributes.brightness', '>=', (brightness_night if is_night else brightness)) | list | count > 0 }}"
  lights_night: !input "target_light_night"
  lights_night_list: "{{ lights_night.entity_id if lights_night.entity_id is defined else [] }}"
  lights_night_exists: "{{ lights_night is defined and lights_night.entity_id is defined and expand(lights_night.entity_id) | list | count > 0 }}"
  is_lights_on_night: "{{ (expand(lights_night.entity_id) | selectattr('state', '==', 'on') | list | count > 0) if lights_night_exists else (expand(lights.entity_id) | selectattr('state', '==', 'on') | selectattr('attributes.brightness', 'defined') | selectattr('attributes.brightness', '>=', (brightness_night if is_night else brightness)) | list | count > 0) }}"
  ambient_sensor: !input ambient_sensor
  ambient_sensor_exists: "{{ ambient_sensor is defined and expand(ambient_sensor) | list | count > 0 }}"
  current_lux: "{{ states(ambient_sensor) if ambient_sensor_exists else -1 }}"
  minimum_lux: !input min_lux
  lights_day_only_list: >
    {% set all_lights = lights.entity_id %}
    {% set night_lights = lights_night_list %}
    {{ all_lights | reject('in', night_lights) | list }}

triggers:
  - trigger: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
  - trigger: state
    entity_id: !input radar
    from: "off"
    to: "on"
  - trigger: state
    id: nt_on
    entity_id: !input night_toggle
    to: "on"
  - trigger: state
    id: nt_off
    entity_id: !input night_toggle
    to: "off"
  - trigger: numeric_state
    id: illuminance
    entity_id: !input ambient_sensor
    below: !input min_lux

conditions:
  - condition: template
    value_template: |
      {%- set last = state_attr(this.entity_id, 'last_triggered') %}
      {{ (last is none) or (now() - last > timedelta(seconds=1)) }}

actions:
  - if: "{{ trigger.id == 'nt_on' and not is_lights_on }}"
    then:
      - stop: Lights are off!
  - if: "{{ trigger.id == 'nt_off' and not is_lights_on_night }}"
    then:
      - stop: Lights are off!
  - if: "{{ trigger.id == 'illuminance' }}"
    then:
      - if: "{{ (mmwave_exists and states(mmwave) == 'off') and (states(motion_sensor) == 'off')  }}"
        then:
          - stop: No occupancy!
  - if: "{{ trigger.id == 'nt_on' }}" # day -> night
    then:
      - if: "{{ is_lights_on }}"
        then:
          - action: light.turn_off # turn off day-only lights
            data:
              entity_id: "{{ lights_day_only_list }}"
          - action: light.turn_on # adjust night lights temp. etc
            data:
              color_temp_kelvin: "{{ temperature_night }}"
              brightness: "{{ brightness_night }}"
              transition: 0
            target: "{{ lights_night }}"
  - if: "{{ (not is_night and not is_lights_on) or (is_night and not is_lights_on_night) }}"
    then:
      - if: "{{ not (ambient_sensor_exists) or (ambient_sensor_exists and current_lux < minimum_lux) }}"
        then:
          - action: light.turn_on
            data:
              color_temp_kelvin: "{{ temperature_night if is_night else temperature}}"
              brightness: "{{ brightness_night if is_night else brightness}}"
              transition: 1
            target: "{{ lights_night if (lights_night_exists and is_night) else lights }}"
  - if: "{{ mmwave_exists }}"
    then:
      - wait_for_trigger:
          - trigger: state
            entity_id: !input radar
            to: "on"
        timeout:
          seconds: 10
      - if: "{{ states(mmwave) == 'on' }}" # mmwave sensor triggered
        then:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input radar
                to: "off"
        else: # fall back to motion sensor
          - delay:
              seconds: !input delay_non_mmwave
      - delay: # default mmWave delay
          seconds: !input delay
    else: # mmWave doesn't exist
      - if: "{{ states(motion_sensor) == 'on' }}"
        then:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input motion_sensor
                to: "off"
      - delay: # motion sensor delay
          seconds: !input delay_non_mmwave
  - action: light.turn_on
    data:
      brightness_step_pct: !input brightness_step_pct
    target: "{{ lights_night if lights_night_exists and is_night else lights }}"
  - delay:
      seconds: !input dim_time
  - action: light.turn_off
    target: "{{ lights_night if lights_night_exists and is_night else lights }}"
mode: restart
